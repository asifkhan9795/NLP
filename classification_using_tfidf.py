# -*- coding: utf-8 -*-
"""Classification using TFIDF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15J0O-GYGTl5FLdDkXc0MclJpcR6hiQmx
"""



import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

# Sample dataset - Text and Labels (for binary classification)
documents = [
    "This is a good product. I like it a lot.",
    "Terrible experience! I will never buy this again.",
    "I love this product, it is amazing.",
    "This is the worst purchase I have ever made.",
    "I am extremely happy with my purchase.",
    "It broke after a few days, very disappointed.",
    "Fantastic! Exactly what I needed.",
    "Awful, didn't work as expected.",
    "It's okay, but could be better.",
    "Not great, but not terrible either."
]

# Labels: 1 for positive sentiment, 0 for negative sentiment
labels = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]

# Step 1: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(documents, labels, test_size=0.2, random_state=42)

# Step 2: Use TfidfVectorizer to transform the text data into TF-IDF features
vectorizer = TfidfVectorizer()

# Fit and transform the training data
X_train_tfidf = vectorizer.fit_transform(X_train)

# Transform the testing data (use the same vectorizer fitted on the training data)
X_test_tfidf = vectorizer.transform(X_test)

# Step 3: Build a Logistic Regression classifier
classifier = LogisticRegression()

# Train the classifier
classifier.fit(X_train_tfidf, y_train)

# Step 4: Make predictions on the test set
y_pred = classifier.predict(X_test_tfidf)

# Step 5: Evaluate the classifier
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Classification report for detailed evaluation
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Confusion matrix to see how many were correctly and incorrectly classified
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))